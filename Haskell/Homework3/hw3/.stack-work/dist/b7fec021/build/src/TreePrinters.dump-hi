
==================== FINAL INTERFACE ====================
2016-09-26 09:50:02.2231977 UTC

interface hw3-0.1.0.0-AXaGW1BIMzGD78qTtHJ6tU:TreePrinters 8001
  interface hash: 03b402ae0194cf24ea0d5a8303ee1a82
  ABI hash: 7c88ec78d16b768a762b0e73a0a4a7fa
  export-list hash: 1bf1e04e6a8f6bccd854a07582768b28
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e5e73e7b894a0fd370ee078bb0c05b13
  sig of: Nothing
  used TH splices: False
  where
exports:
  TreePrinters.directoryPrint
  TreePrinters.verticalPrint
  TreePrinters.Tree{TreePrinters.Leaf TreePrinters.Node}
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Char 793b969914b1622fef8ab278ed0a2b7f
import  -/  base-4.9.0.0:Data.Foldable 3cbed01c922be29649c33015287c82ca
import  -/  base-4.9.0.0:Data.List d711f98b49ef5d33e5b3d404631ed073
import  -/  base-4.9.0.0:Data.OldList 3c899c6d8e6204063769214449ac0954
import  -/  base-4.9.0.0:GHC.Base dd8044a8d640eee51828c17c476a6ba7
import  -/  base-4.9.0.0:GHC.Err 20faef8829fd13c027d0ee2213637534
import  -/  base-4.9.0.0:GHC.List 47d436dfb7454bb1883fb4d943e3f389
import  -/  base-4.9.0.0:GHC.Num f0aed3315b3ed1b330b71fc4148a5581
import  -/  base-4.9.0.0:GHC.Real 011de9ca3282ad24a84e4e15f974f98e
import  -/  base-4.9.0.0:GHC.Show 0b5845243cb2ec62b57dd6963d276ec6
import  -/  base-4.9.0.0:GHC.Unicode 01f7a6469be023f2c0f9e458d1a0270d
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
b37107482b72b58ae41406d2890ee7a9
  $fFunctorTree :: GHC.Base.Functor TreePrinters.Tree
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ TreePrinters.Tree
                  TreePrinters.$fFunctorTree_$cfmap
                  TreePrinters.$fFunctorTree_$c<$ -}
b37107482b72b58ae41406d2890ee7a9
  $fFunctorTree_$c<$ ::
    a -> TreePrinters.Tree b -> TreePrinters.Tree a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (eta :: a) (eta1 :: TreePrinters.Tree b) ->
                 TreePrinters.$fFunctorTree_$cfmap
                   @ b
                   @ a
                   (\ (ds :: b) -> eta)
                   eta1) -}
b37107482b72b58ae41406d2890ee7a9
  $fFunctorTree_$cfmap ::
    (a -> b) -> TreePrinters.Tree a -> TreePrinters.Tree b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
b37107482b72b58ae41406d2890ee7a9
  $fShowTree ::
    GHC.Show.Show a => GHC.Show.Show (TreePrinters.Tree a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (TreePrinters.Tree a)
                  (TreePrinters.$fShowTree_$cshowsPrec @ a $dShow)
                  (TreePrinters.$fShowTree_$cshow @ a $dShow)
                  (TreePrinters.$fShowTree_$cshowList @ a $dShow) -}
979a8f006ae943c13bffb2738cda651d
  $fShowTree1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
b37107482b72b58ae41406d2890ee7a9
  $fShowTree_$cshow ::
    GHC.Show.Show a => TreePrinters.Tree a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: TreePrinters.Tree a) ->
                 TreePrinters.$fShowTree_$cshowsPrec
                   @ a
                   $dShow
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b37107482b72b58ae41406d2890ee7a9
  $fShowTree_$cshowList ::
    GHC.Show.Show a => [TreePrinters.Tree a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [TreePrinters.Tree a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (TreePrinters.Tree a)
                   (TreePrinters.$fShowTree_$cshowsPrec
                      @ a
                      $dShow
                      TreePrinters.$fShowTree1)
                   eta
                   eta1) -}
b37107482b72b58ae41406d2890ee7a9
  $fShowTree_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> TreePrinters.Tree a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><L,1*U(U)><S,1*U> -}
f49c87f251f0dff808b6d52b6f8dc3c5
  $tc'Leaf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12912618326988864338##
                   2752243299867933064##
                   TreePrinters.$trModule
                   TreePrinters.$tc'Leaf1) -}
760eedb068753f647026a42cee24d96a
  $tc'Leaf1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Leaf"#) -}
81b3856cf76dfae73340be4a4364b530
  $tc'Node :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16063737109828274325##
                   17457606956335358101##
                   TreePrinters.$trModule
                   TreePrinters.$tc'Node1) -}
4bfaab0847cd71226da901db29916b42
  $tc'Node1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Node"#) -}
6c14fb1b846a7af6a43d929443760e0f
  $tcTree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1669964994499417522##
                   8552440191562485771##
                   TreePrinters.$trModule
                   TreePrinters.$tcTree1) -}
0c0de5487eb17d99b729dafe5b5d5a15
  $tcTree1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Tree"#) -}
037f1c16b6058de15d3c9fdf432d0f02
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TreePrinters.$trModule2
                   TreePrinters.$trModule1) -}
6823a4e6cb0521d3aa255de9d66ead08
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TreePrinters"#) -}
901254170b56728c3eca84f385e6e619
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "hw3-0.1.0.0-AXaGW1BIMzGD78qTtHJ6tU"#) -}
b37107482b72b58ae41406d2890ee7a9
  data Tree a
    = Leaf | Node a (TreePrinters.Tree a) (TreePrinters.Tree a)
877ddd1212ce84fefda9232f3d6e1bf4
  type TreeRows = [GHC.Base.String]
91f7e410ffe764dadf54ed6eb838c3bb
  directoryPrint ::
    GHC.Show.Show a => TreePrinters.Tree a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(A,C(U),A)><S,1*U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: TreePrinters.Tree a) ->
                 letrec {
                   treeIndent :: TreePrinters.Tree a -> [[GHC.Types.Char]]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: TreePrinters.Tree a) ->
                     case ds of wild {
                       TreePrinters.Leaf -> TreePrinters.directoryPrint5
                       TreePrinters.Node k lb rb
                       -> GHC.Types.:
                            @ [GHC.Types.Char]
                            (GHC.CString.unpackAppendCString#
                               "--"#
                               (GHC.Show.show @ a $dShow k))
                            (let {
                               ds1 :: ([GHC.Types.Char], [[GHC.Types.Char]])
                               = case treeIndent rb of wild1 {
                                   [] -> TreePrinters.directoryPrint4 : r rs -> (r, rs) }
                             } in
                             let {
                               z :: [GHC.Types.Char]
                               = GHC.CString.unpackAppendCString#
                                   "  `"#
                                   (case ds1 of ds2 { (,) r rs -> r })
                             } in
                             let {
                               z1 :: [[GHC.Types.Char]]
                               = case ds1 of ds2 { (,) r rs ->
                                 GHC.Base.map
                                   @ [GHC.Types.Char]
                                   @ [GHC.Types.Char]
                                   TreePrinters.directoryPrint2
                                   rs }
                             } in
                             let {
                               z2 :: [[GHC.Types.Char]] = GHC.Types.: @ [GHC.Types.Char] z z1
                             } in
                             letrec {
                               go :: [[GHC.Types.Char]] -> [[GHC.Types.Char]]
                                 {- Arity: 1, Strictness: <S,1*U> -}
                               = \ (ds2 :: [[GHC.Types.Char]]) ->
                                 case ds2 of wild1 {
                                   [] -> z2
                                   : y ys
                                   -> GHC.Types.:
                                        @ [GHC.Types.Char]
                                        (GHC.Base.++
                                           @ GHC.Types.Char
                                           TreePrinters.directoryPrint1
                                           y)
                                        (go ys) }
                             } in
                             go (treeIndent lb)) }
                 } in
                 Data.OldList.unlines (treeIndent eta)) -}
5f361126e49d5da232eef1149b999cd4
  directoryPrint1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "  |"#) -}
d5e62a7a677b28005a93972825780483
  directoryPrint2 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   TreePrinters.directoryPrint3) -}
130ceedd2ebf7407acea61d513631ed1
  directoryPrint3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "   "#) -}
ef73fb7906bc04da37a97d7250fd8dd7
  directoryPrint4 :: ([GHC.Types.Char], [[GHC.Types.Char]])
  {- Strictness: x -}
816061e8b335d74e42968bff277441ab
  directoryPrint5 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   TreePrinters.directoryPrint6
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
665fabef849879ded627fac31d07fba3
  directoryPrint6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "-- /-"#) -}
f05c0f4db467759cb583268b2984fb98
  rowPrinter ::
    TreePrinters.Tree GHC.Base.String -> TreePrinters.TreeRows
  {- Arity: 1, Strictness: <S,1*U> -}
f78148b9383624269329f9b954a02ccf
  verticalPrint ::
    GHC.Show.Show a => TreePrinters.Tree a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(A,1*C(U),A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (eta :: TreePrinters.Tree a) ->
                 Data.OldList.unlines
                   (TreePrinters.rowPrinter
                      (TreePrinters.$fFunctorTree_$cfmap
                         @ a
                         @ GHC.Base.String
                         (GHC.Show.show @ a $dShow)
                         eta))) -}
instance [safe] GHC.Base.Functor [TreePrinters.Tree]
  = TreePrinters.$fFunctorTree
instance [safe] GHC.Show.Show [TreePrinters.Tree]
  = TreePrinters.$fShowTree
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

